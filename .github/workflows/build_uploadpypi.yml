# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true

jobs:
  build:
    name: Build wheels ${{ matrix.os }}, ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        # the mac computer used by github actions is too old to run the tests
        # when fixed, add back macos-latest.  notee: mac user can still download and use riptable
        os: [ubuntu-latest]
        # 3.9 does not work because of llvmlite, 3.6 fails for another reason
        python-version: [3.7]
        platform: [x64]
        exclude:
          - os: macos-latest
            platform: x32

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy>=1.19.1
        python -m pip install cibuildwheel>=1.7.4
    - name: Build wheels on ${{ matrix.os}}
      run: |
        RUNNER_OS="${{ runner.os }}"
        PLATFORM="${{ matrix.platform }}"
        echo $RUNNER_OS
        echo $PLATFORM
        export CIBW_BUILD="cp36-manylinux_x86_64 cp37-manylinux_x86_64 cp38-manylinux_x86_64"
        if [ "$RUNNER_OS" == "Windows" ]; then
          if [ "$PLATFORM" == "x64" ]; then
            export CIBW_BUILD="cp36-win_amd64 cp37-win_amd64 cp38-win_amd64"
          elif [ "$PLATFORM" == "x32" ]; then
            export CIBW_BUILD="cp37-win32"
          fi
        elif [ "$RUNNER_OS" == "Linux" ]; then
          if [ "$PLATFORM" == "x64" ]; then
            export CIBW_BUILD="cp36-manylinux_x86_64 cp37-manylinux_x86_64 cp38-manylinux_x86_64"
          elif [ "$PLATFORM" == "x32" ]; then
            export CIBW_BUILD="cp36-manylinux_i686 cp37-manylinux_i686 cp38-manylinux_i686"
          fi
        elif [ "$RUNNER_OS" == "macOS" ]; then
          export CIBW_BUILD="cp36-macosx_x86_64 cp37-macosx_x86_64 cp38-macosx_x86_64"
        fi        
        python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v2
      with:
        path: ./wheelhouse/*.whl       

  build_sdist:
    name: Build source dist ${{ matrix.os }}, ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # the mac computer used by github actions is too old to run the tests
        # when fixed, add back macos-latest.  notee: mac user can still download and use riptable
        os: [ubuntu-latest, windows-latest, macos-latest]
        # 3.9 does not work because of llvmlite, 3.6 fails for another reason
        python-version: [3.6, 3.7, 3.8]
        platform: [x64]
        exclude:
          - os: macos-latest
            platform: x32
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build sdist
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy>=1.19.1 setuptools wheel twine
          python setup.py build --force
          python setup.py install
          python setup.py sdist
          twine upload dist/* --verbose
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz        
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
    # pnumpy 
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
        # which we use for setting the package version (via setuptools-scm).
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist
        twine upload dist/* --verbose

